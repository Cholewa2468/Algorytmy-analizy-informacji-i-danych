using System;
using System.IO;
using System.Linq;

class Program
{
    static void Main()
    {
// A) Wyszukiwanie binarne (tablica musi być posortowana)
        string text = File.ReadAllText("tekst.txt"); // Odczytanie całego pliku
        string[] words = text.Split(new char[] { ' ', ',', '.', '!', '?' }, StringSplitOptions.RemoveEmptyEntries);

        char letter = 'a';
            
        int steps = FindFirstWordStartingWithA(words, letter);

        if (steps != -1)
            Console.WriteLine($"Pierwsze słowo na '{letter}' lub '{char.ToUpper(letter)}' znalezione po {steps} krokach.");
        else
            Console.WriteLine("Brak słowa rozpoczynającego się na '{letter}' w pliku.");


// B)
        // Znajdź ostatnie słowo w pliku
        string text2 = File.ReadAllText("tekst2.txt"); // Odczytanie całego pliku
        string[] words2 = text2.Split(new char[] { ' ', ',', '.', '!', '?' }, StringSplitOptions.RemoveEmptyEntries);

        string targetWord = words2[words2.Length - 1]; // ostatnie słowo

        int steps2 = FindTargetWord(words2, targetWord);

        if (steps2 != -1)
            Console.WriteLine($"Ostatnie słowo '{targetWord}' znalezione po {steps2} krokach.");
        else
            Console.WriteLine("Nie znaleziono ostatniego słowa.");
    }

    static int FindFirstWordStartingWithA(string[] words, char letter)
    {
        int left = 0;
        int right = words.Length - 1;
        int steps = 0;

        // Sortowanie tablicy w => w – tzw. wyrażenie lambda, które mówi: sortuj po samym elemencie (czyli słowie).
        words = words.OrderBy(w => w, StringComparer.OrdinalIgnoreCase).ToArray(); 

        while (left <= right)
        {
            steps++;
            int mid = (left + right) / 2;
            char firstChar = words[mid][0];

            if (firstChar == letter || firstChar == char.ToUpper(letter))
            {
                return steps;
            }
            else if (firstChar < letter)
            {
                left = mid + 1;
            }
            else
            {
                right = mid - 1;
            }
        }

        return -1; // Jeśli nie znaleziono
    }

    static int FindTargetWord(string[] words2, string target)
    {
        int left = 0;
        int right = words2.Length - 1;
        int steps = 0;

        words2 = words2.OrderBy(w => w, StringComparer.OrdinalIgnoreCase).ToArray(); 

        while (left <= right)
        {
            steps++;
            int mid = (left + right) / 2;
            int comparison = string.Compare(words2[mid], target, StringComparison.OrdinalIgnoreCase);

            if (comparison == 0)
            {
                return steps;
            }
            else if (comparison < 0)
            {
                left = mid + 1;
            }
            else
            {
                right = mid - 1;
            }
        }
        return -1;
    }
}
